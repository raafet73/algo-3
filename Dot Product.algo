

PROCEDURE Dot_Product(v1,v2 : ARRAY_OF INTEGER, VAR ps : INTEGER)
VAR
    i : INTEGER;
BEGIN
    ps :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculat dot product"); 
    END_IF
    WHILE (i <v1.length ) DO
        ps := ps + v1[i]*v2[i];
        i++;
    END_WHILE
END

ALGORITHM orth_vectors
VAR
    v : ARRAY_OF INTEGER [50][50];
    ps,n,i,j : INTEGER;
BEGIN
Read(n)
for i from 0 to n-1 do
for j from 0 to n-1 do
    read_array(i,j,v[i][j]); 
    Dot_Product(v[i][j],v[i+1][j],ps);
    IF (ps = 0) THEN
        Write("v[i] and v[i+1]are orthogonal");
    ELSE
        Write("v[i] and v[i+1] are not orthogonal");
    END_IF
END



FUNCTION Dot_Product(v1,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i,ps : INTEGER;
BEGIN
    ps :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculat dot product");
        RETURN false;
    END_IF
    WHILE (i <v1.length ) DO
        ps := ps + v1[i]*v2[i];
    END_WHILE
    RETURN ps ;
END

ALGORITHM orth_vectors
VAR
    v : ARRAY_OF INTEGER [50][50];
    ps : INTEGER;
BEGIN
    Read(n)
for i from 0 to n-1 do
for j from 0 to n-1 do
    read_array(i,j,v[i][j]); 
   ps := Dot_Product(v[i][j],v[i+1][j],ps);
     IF (ps = 0) THEN
        Write("v[i] and v[i+1]are orthogonal");
    ELSE
        Write("v[i] and v[i+1] are not orthogonal");
    END_IF
    
END